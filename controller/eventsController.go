package controllers

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"

	"projet_vdfi/initializers"
	"projet_vdfi/models"
)

// üü¢ CR√âER UN √âV√âNEMENT (ADMIN SEULEMENT)
func CreateEvent(c *gin.Context) {
	// R√©cup√©rer l'ID de l'utilisateur depuis le token apr√®s passage par le middleware
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	// Convertir userID en uint
	uid, ok := userID.(uint)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Invalid user ID"})
		return
	}

	// R√©cup√©rer l'utilisateur √† partir de la base de donn√©es
	var user models.User
	result := initializers.DB.First(&user, uid)
	if result.Error != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}

	// V√©rifier si l'utilisateur est admin
	isAdmin := user.IsAdmin
	fmt.Println("isAdmin", isAdmin)

	if !isAdmin {
		c.JSON(http.StatusForbidden, gin.H{"error": "Acc√®s refus√©, administrateur requis"})
		return
	}

	var event models.Event
	if err := c.ShouldBindJSON(&event); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Donn√©es invalides"})
		return
	}

	// Ajouter l'√©v√©nement en base de donn√©es
	if err := initializers.DB.Create(&event).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "√âchec de la cr√©ation de l'√©v√©nement"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "√âv√©nement cr√©√© avec succ√®s", "event": event})
}

// üü° LISTER TOUS LES √âV√âNEMENTS
func GetEvents(c *gin.Context) {
	var events []models.Event
	if err := initializers.DB.Find(&events).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "√âchec de r√©cup√©ration des √©v√©nements"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"events": events})
}

// üü† OBTENIR UN √âV√âNEMENT PAR ID
func GetEventByID(c *gin.Context) {
	id := c.Param("id")

	var event models.Event
	if err := initializers.DB.First(&event, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "√âv√©nement introuvable"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"event": event})
}

// üîµ METTRE √Ä JOUR UN √âV√âNEMENT (ADMIN SEULEMENT)
func UpdateEvent(c *gin.Context) {
	// R√©cup√©rer l'ID de l'utilisateur depuis le token apr√®s passage par le middleware
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	// Convertir userID en uint
	uid, ok := userID.(uint)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Invalid user ID"})
		return
	}

	// R√©cup√©rer l'utilisateur √† partir de la base de donn√©es
	var user models.User
	result := initializers.DB.First(&user, uid)
	if result.Error != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}

	// V√©rifier si l'utilisateur est admin
	isAdmin := user.IsAdmin
	fmt.Println("isAdmin", isAdmin)

	if !isAdmin {
		c.JSON(http.StatusForbidden, gin.H{"error": "Acc√®s refus√©, administrateur requis"})
		return
	}

	id := c.Param("id")
	var event models.Event

	// V√©rifier si l'√©v√©nement existe
	if err := initializers.DB.First(&event, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "√âv√©nement introuvable"})
		return
	}

	// Mettre √† jour l'√©v√©nement
	if err := c.ShouldBindJSON(&event); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Donn√©es invalides"})
		return
	}

	if err := initializers.DB.Save(&event).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "√âchec de la mise √† jour"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "√âv√©nement mis √† jour avec succ√®s", "event": event})
}

// üî¥ SUPPRIMER UN √âV√âNEMENT (ADMIN SEULEMENT)
func DeleteEvent(c *gin.Context) {
	// R√©cup√©rer l'ID de l'utilisateur depuis le token apr√®s passage par le middleware
	userID, exists := c.Get("userID")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	// Convertir userID en uint
	uid, ok := userID.(uint)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Invalid user ID"})
		return
	}

	// R√©cup√©rer l'utilisateur √† partir de la base de donn√©es
	var user models.User
	result := initializers.DB.First(&user, uid)
	if result.Error != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}

	// V√©rifier si l'utilisateur est admin
	isAdmin := user.IsAdmin
	fmt.Println("isAdmin", isAdmin)

	if !isAdmin {
		c.JSON(http.StatusForbidden, gin.H{"error": "Acc√®s refus√©, administrateur requis"})
		return
	}

	id := c.Param("id")

	// V√©rifier si l'√©v√©nement existe
	if err := initializers.DB.Delete(&models.Event{}, id).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "√âchec de suppression"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "√âv√©nement supprim√© avec succ√®s"})
}
